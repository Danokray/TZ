'use client';

import { useState } from 'react';
import Navigation from '@/components/Navigation';
import styles from './page.module.scss';

export default function TestBitrixPage() {
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState<string>('');

  const testConnection = async () => {
    setLoading(true);
    setError('');
    setResult(null);

    try {
      const response = await fetch('/api/bitrix/test-connection');
      const data = await response.json();
      
      if (data.success) {
        setResult(data.data);
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + (err instanceof Error ? err.message : 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const testCreateContact = async () => {
    setLoading(true);
    setError('');
    setResult(null);

    try {
      const response = await fetch('/api/bitrix/test-connection', {
        method: 'POST'
      });
      const data = await response.json();
      
      if (data.success) {
        setResult(data.data);
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + (err instanceof Error ? err.message : 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const debugConnection = async () => {
    setLoading(true);
    setError('');
    setResult(null);

    try {
      const response = await fetch('/api/bitrix/debug-connection');
      const data = await response.json();
      
      if (data.success) {
        setResult(data.data);
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
        setResult(data.details);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + (err instanceof Error ? err.message : 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  const testContactCreation = async () => {
    setLoading(true);
    setError('');
    setResult(null);

    try {
      const response = await fetch('/api/bitrix/test-contact-creation', {
        method: 'POST'
      });
      const data = await response.json();
      
      if (data.success) {
        setResult(data.data);
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
        setResult(data.details);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + (err instanceof Error ? err.message : 'Unknown error'));
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.testPage}>
      <Navigation />
      
      <main className={styles.main}>
        <h1 className={styles.title}>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24</h1>
        
        <div className={styles.instructions}>
          <h2>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</h2>
          <ol>
            <li>–û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª <code>src/config/bitrix.ts</code> —Å –≤–∞—à–∏–º —Ä–µ–∞–ª—å–Ω—ã–º –≤–µ–±—Ö—É–∫–æ–º</li>
            <li>–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è <code>BITRIX_WEBHOOK_URL</code></li>
            <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</li>
          </ol>
        </div>

        <div className={styles.buttons}>
          <button 
            onClick={debugConnection}
            disabled={loading}
            className={styles.testButton}
          >
            {loading ? '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º...' : 'üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'}
          </button>
          
          <button 
            onClick={testConnection}
            disabled={loading}
            className={styles.testButton}
          >
            {loading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}
          </button>
          
          <button 
            onClick={testCreateContact}
            disabled={loading}
            className={styles.testButton}
          >
            {loading ? '–°–æ–∑–¥–∞–µ–º...' : '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞'}
          </button>
          
          <button 
            onClick={testContactCreation}
            disabled={loading}
            className={styles.testButton}
          >
            {loading ? '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º...' : 'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞'}
          </button>
        </div>

        {error && (
          <div className={styles.error}>
            <h3>‚ùå –û—à–∏–±–∫–∞:</h3>
            <p>{error}</p>
          </div>
        )}

        {result && (
          <div className={styles.result}>
            <h3>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
            <pre className={styles.codeBlock}>{JSON.stringify(result, null, 2)}</pre>
          </div>
        )}
      </main>
    </div>
  );
}
