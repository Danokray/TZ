import { NextResponse } from 'next/server';
import bitrixService from '@/services/bitrix';
import { ApiResponse } from '@/types';

export async function GET() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–∏—Ç—Ä–∏–∫—Å24...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await bitrixService.getUsers();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã:', users);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π —Å–¥–µ–ª–æ–∫
    const stages = await bitrixService.getDealStages();
    console.log('‚úÖ –°—Ç–∞–¥–∏–∏ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω—ã:', stages);
    
    return NextResponse.json<ApiResponse>({
      success: true,
      data: {
        users: users.result || users,
        stages: stages.result || stages,
        message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–∏—Ç—Ä–∏–∫—Å24 —É—Å–ø–µ—à–Ω–æ!'
      },
      message: 'Bitrix24 connection test successful'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–∏—Ç—Ä–∏–∫—Å24:', error);
    
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–∏—Ç—Ä–∏–∫—Å24',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

export async function POST() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    const testContact = await bitrixService.createContact({
      name: 'Test',
      lastName: 'User',
      email: `test-${Date.now()}@example.com`,
      phone: '+7 (777) 777-77-77',
      sourceId: 'WEB'
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω:', testContact);
    
    return NextResponse.json<ApiResponse>({
      success: true,
      data: testContact,
      message: 'Test contact created successfully'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
    
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
