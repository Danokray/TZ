import { NextRequest, NextResponse } from 'next/server';
import { RegisterForm, ApiResponse } from '@/types';
import database from '@/services/database';
import bitrixService from '@/services/bitrix';

export async function POST(request: NextRequest) {
  try {
    const body: RegisterForm = await request.json();
    const { login, email, password, confirmPassword } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!login || !email || !password || !confirmPassword) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
      }, { status: 400 });
    }

    if (password !== confirmPassword) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
      }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (password.length < 6) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUserByEmail = database.getUserByEmail(email);
    if (existingUserByEmail) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      }, { status: 400 });
    }

    const existingUserByLogin = database.getUserByLogin(login);
    if (existingUserByLogin) {
      return NextResponse.json<ApiResponse>({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      }, { status: 400 });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const userData = {
      login,
      email,
      password,
      firstName: '–ê–ª–∏–º',
      lastName: '–î–∂–æ–ª–¥–∞—Å–ø–∞–µ–≤',
      phone: '+7 (123) 456-78-90',
      address: '–ê–ª–º–∞—Ç—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'
    };

    const newUser = await database.createUser(userData);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –ë–∏—Ç—Ä–∏–∫—Å24
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –ë–∏—Ç—Ä–∏–∫—Å24...', {
        name: newUser.firstName,
        lastName: newUser.lastName,
        email: newUser.email,
        phone: newUser.phone
      });
      
      const bitrixResult = await bitrixService.createContact({
        name: newUser.firstName,
        lastName: newUser.lastName,
        email: newUser.email,
        phone: newUser.phone,
        sourceId: 'WEB'
      });
      
      console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ë–∏—Ç—Ä–∏–∫—Å24:', bitrixResult);
    } catch (bitrixError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:', bitrixError);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', bitrixError instanceof Error ? bitrixError.message : 'Unknown error');
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –ë–∏—Ç—Ä–∏–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    }

    // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const { password: _, ...userWithoutPassword } = newUser;

    return NextResponse.json<ApiResponse>({
      success: true,
      data: userWithoutPassword,
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
    });

  } catch (error) {
    console.error('Register error:', error);
    return NextResponse.json<ApiResponse>({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
    }, { status: 500 });
  }
}